import processing.serial.*;

//station grid variables
int GRID_X = 4;
int GRID_Y = 4;
int STATION_SEGMENT_COUNT = 5;
int[] STATION_ORDER = {
  0, 1, 2, 3, 
  4, 5, 6, 7, 
  8, 9, 10, 11, 
  12, 13, 14, 15
};
Table STATION_STATES_TABLE;
int[][][][] STATION_SEGMENT_COLOR = new int[GRID_X][GRID_Y][STATION_SEGMENT_COUNT][3];
int[][][] STATION_SEGMENT_STATE = new int[GRID_X][GRID_Y][STATION_SEGMENT_COUNT];

//serial communication
int STATION_PORT_INDEX = 0;
Serial STATION_PORT;
int SERIAL_BAUD = 57600;
int STATION_COUNT = 36;
int STATION_LED_COUNT = 45;
int STATION_LED_SEGMENT_COUNT = 9;
int COLOR_BYTE_COUNT = 3;
int STATION_COLOR_COUNT = 180;
int STATION_BYTE_COUNT = 540; //3 bytes of color, 5 segments, 36 stations = 540
byte[] packetBytes = new byte[STATION_BYTE_COUNT];

//GUI
int gui_X = 50;
int gui_Y = 50;
int gui_W = 80;
int gui_H = 20;
int gui_gap = 50;
boolean animate = false;

void initGame() {
  printArray(Serial.list());
  String portName = Serial.list()[STATION_PORT_INDEX];
  STATION_PORT = new Serial(this, portName, SERIAL_BAUD);
  for (int s=0; s<STATION_COUNT; s++) {
    for (int i=0; i<STATION_SEGMENT_COUNT; i++) {
      int colorIndex = s*STATION_SEGMENT_COUNT+i;
      packetBytes[colorIndex*COLOR_BYTE_COUNT+0] = (byte)(0); //RED
      packetBytes[colorIndex*COLOR_BYTE_COUNT+1] = (byte)(0); //GREEN
      packetBytes[colorIndex*COLOR_BYTE_COUNT+2] = (byte)(0); //BLUE
      setStationColor(s, i, 0, 0, 0);
    }
  }
  STATION_STATES_TABLE = loadTable("station_states.csv");
  for (int i=0; i<STATION_ORDER.length; i++) {
    for (int j=0; j<STATION_SEGMENT_COUNT; j++) {
      setStationState(STATION_ORDER[i], j, STATION_STATES_TABLE.getInt(STATION_ORDER[i], j));
    }
  }
}

void setGridState(int x, int y, int z, int s) {
  STATION_SEGMENT_STATE[x][y][z] = s;
  int stationIndex = y*GRID_X+x;
  STATION_STATES_TABLE.setInt(STATION_ORDER[stationIndex], z, s);
}

void setGridColor(int x, int y, int z, int r, int g, int b) {
  STATION_SEGMENT_COLOR[x][y][z][0] = r;
  STATION_SEGMENT_COLOR[x][y][z][1] = g;
  STATION_SEGMENT_COLOR[x][y][z][2] = b;
}

void setStationState(int i, int j, int s) {
  int rowIndex = (i%GRID_X);
  int colIndex = (i/GRID_X);
  if (rowIndex < GRID_X && colIndex < GRID_Y) {
    STATION_SEGMENT_STATE[rowIndex][colIndex][j] = s;
  }
  STATION_STATES_TABLE.setInt(i, j, s);
}

void setStationColor(int i, int j, int r, int g, int b) {
  int rowIndex = (i%GRID_X);
  int colIndex = (i/GRID_X);
  if (rowIndex < GRID_X && colIndex < GRID_Y) {
    STATION_SEGMENT_COLOR[rowIndex][colIndex][j][0] = r;
    STATION_SEGMENT_COLOR[rowIndex][colIndex][j][1] = g;
    STATION_SEGMENT_COLOR[rowIndex][colIndex][j][2] = b;
  }
}

void writeTable() {
  try {
    saveTable(STATION_STATES_TABLE, "data/station_states.csv");
  } 
  catch (Exception e) {
    e.printStackTrace();
  }
}

void updatePackets() {
  for (int i=0; i<STATION_ORDER.length; i++) {
    int rowIndex = (i%GRID_X);
    int colIndex = (i/GRID_X);
    int s = STATION_ORDER[i];
    for (int j=0; j<STATION_SEGMENT_COUNT; j++) {
      int colorIndex = s*STATION_SEGMENT_COUNT+j;
      packetBytes[colorIndex*COLOR_BYTE_COUNT+0] = (byte)(STATION_SEGMENT_COLOR[rowIndex][colIndex][j][0]); //RED
      packetBytes[colorIndex*COLOR_BYTE_COUNT+1] = (byte)(STATION_SEGMENT_COLOR[rowIndex][colIndex][j][1]); //GREEN
      packetBytes[colorIndex*COLOR_BYTE_COUNT+2] = (byte)(STATION_SEGMENT_COLOR[rowIndex][colIndex][j][2]); //BLUE
    }
  }
}

void sendPackets() {
  STATION_PORT.write(packetBytes);
}

void drawGrid(int x, int y, int w, int h, int gap) {
  pushMatrix();
  translate(x, y);
  for (int i=0; i<GRID_X; i++) {
    for (int j=0; j<GRID_Y; j++) {
      int xPos = i*(w+gap);
      int yPos = j*(h*STATION_SEGMENT_COUNT+gap);
      for (int k=0; k<STATION_SEGMENT_COUNT; k++) {
        int w2 = w*STATION_SEGMENT_STATE[i][j][k]/3*19/20 + w/20;
        int xPos2 = xPos + (w-w2)/2;
        int yPos2 = yPos + k*h;
        noFill();
        stroke(255, 40);
        rect(xPos, yPos2, w, h);
        fill(STATION_SEGMENT_COLOR[i][j][k][0], STATION_SEGMENT_COLOR[i][j][k][1], STATION_SEGMENT_COLOR[i][j][k][2]);
        stroke(150);
        rect(xPos2, yPos2, w2, h);
      }
    }
  }
  popMatrix();
}

void randomize() {
  for (int i=0; i<GRID_X; i++) {
    for (int j=0; j<GRID_Y; j++) {
      for (int k=0; k<STATION_SEGMENT_COUNT; k++) {
        setGridState(i, j, k, floor(random(1, 4)));
      }
    }
  }
}

void clearState() {
  for (int s=0; s<STATION_COUNT; s++) {
    for (int j=0; j<STATION_SEGMENT_COUNT; j++) {
      setStationState(s, j, 0);
    }
  }
}


void setup() {
  fullScreen();
  textSize(12);
  initGame();
  initObjects();
}

void draw() {
  background(0);
  drawSim();
  drawGrid(gui_X, gui_Y, gui_W, gui_H, gui_gap);
  
  updatePackets();
  sendPackets();

  fill(255);
  text("[ R ] randomize", width-200, gui_Y);
  text("[ C ] clear all", width-200, gui_Y+20);
  text("[ S ] start / pause animation", width-200, gui_Y+40);
  text("[ Q ] refresh animation", width-200, gui_Y+60);
}

void keyPressed() {
  switch(keyCode) {
  case 82: //r
    randomize();
    refreshStates();
    writeTable();
    break;
  case 67: //c
    clearState();
    refreshStates();
    writeTable();
    break;
  case 83: //s
    animate = !animate;
    break;
  case 81: //q
    refreshStates();
    break;
  }
}

void mousePressed() {
  for (int i=0; i<GRID_X; i++) {
    for (int j=0; j<GRID_Y; j++) {
      int xPos = i*(gui_W+gui_gap)+gui_X;
      int yPos = j*(gui_H*STATION_SEGMENT_COUNT+gui_gap)+gui_Y;
      for (int k=0; k<STATION_SEGMENT_COUNT; k++) {
        int yPos2 = yPos + k*gui_H;
        if (mouseX > xPos && mouseX < xPos+gui_W && mouseY > yPos2 && mouseY < yPos2+gui_H) {
          STATION_SEGMENT_STATE[i][j][k] = (STATION_SEGMENT_STATE[i][j][k]+1)%4;
          setGridState(i, j, k, STATION_SEGMENT_STATE[i][j][k]);
        }
      }
    }
  }
  writeTable();
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////// GAME ////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////


PVector grid = new PVector(GRID_X, GRID_Y, STATION_SEGMENT_COUNT);
Resource[][][] resource = new Resource[int(grid.x)][int(grid.y)][int(grid.z)];
int[][][][] state = new int[int(grid.x)][int(grid.y)][int(grid.z)][3];
int[][][][] oldState = new int[int(grid.x)][int(grid.y)][int(grid.z)][3];

int smallTransition = 10;
int mediumTransition = 10;
int largeTransition = 10;
int counterBW = 0;
int counter = 0;
Rule[] ruleTable = { //args: index, state to change if dead, state to change if alive
  new Rule(0, 0, 0), 
  new Rule(1, 0, 0), 
  new Rule(2, 0, 0), 
  new Rule(3, 0, 0), 
  new Rule(4, 0, 0), 
  new Rule(5, 0, 0), 
  new Rule(6, 1, 1), 
  new Rule(7, 1, 1), 
  new Rule(8, 1, 1), 
  new Rule(9, 0, 1), 
  new Rule(10, 0, 1), 
  new Rule(11, 0, 0), 
  new Rule(12, 0, 0), 
  new Rule(13, 0, 0), 
  new Rule(14, 0, 0), 
  new Rule(15, 0, 0), 
  new Rule(16, 0, 0), 
  new Rule(17, 0, 0), 
  new Rule(18, 0, 0), 
  new Rule(19, 0, 0), 
  new Rule(20, 0, 0), 
  new Rule(21, 0, 0), 
  new Rule(22, 0, 0), 
  new Rule(23, 0, 0), 
  new Rule(24, 0, 0), 
  new Rule(25, 0, 0), 
  new Rule(26, 0, 0)
};

int timeStamp = 0;
int oldTimeStamp = 0;

void initObjects() {
  for (int i=0; i<grid.x; i++) {
    for (int j=0; j<grid.y; j++) {
      for (int k=0; k<grid.z; k++) {
        resource[i][j][k] = new Resource(i, j, k);
      }
    }
  }
}

void refreshStates() {
  for (int i=0; i<grid.x; i++) {
    for (int j=0; j<grid.y; j++) {
      for (int k=0; k<grid.z; k++) {
        switch (STATION_SEGMENT_STATE[i][j][k]) {
        case 0:
          state[i][j][k][0] = 0;
          state[i][j][k][1] = 0;
          state[i][j][k][2] = 0;
          break;
        case 1:
          state[i][j][k][0] = 1;
          state[i][j][k][1] = 0;
          state[i][j][k][2] = 0;
          break;
        case 2:
          state[i][j][k][0] = 0;
          state[i][j][k][1] = 1;
          state[i][j][k][2] = 0;
          break;
        case 3:
          state[i][j][k][0] = 0;
          state[i][j][k][1] = 0;
          state[i][j][k][2] = 1;
          break;
        }
      }
    }
  }
}

void updateOldState(int m) {
  for (int i=0; i<grid.x; i++) {
    for (int j=0; j<grid.y; j++) {
      for (int k=0; k<grid.z; k++) {
        oldState[i][j][k][m] = state[i][j][k][m];
      }
    }
  }
}

void calRule(int m) {
  int[][][] tempState = new int[int(grid.x)][int(grid.y)][int(grid.z)];
  for (int i=0; i<grid.x; i++) {
    for (int j=0; j<grid.y; j++) {
      for (int k=0; k<grid.z; k++) {
        int n = 0;
        for (int x=-1; x<=1; x++) {
          for (int y=-1; y<=1; y++) {
            for (int z=-1; z<=1; z++) {
              if (x+y+z != 0) {
                int iX = int((grid.x+i+x)%grid.x);
                int jY = int((grid.y+j+y)%grid.y);
                int kZ = int((grid.z+k+z)%grid.z);
                n = n + state[iX][jY][kZ][m];
              }
            }
          }
        }
        tempState[i][j][k] = state[i][j][k][m]==0 ? ruleTable[n].a : ruleTable[n].b;
        //tempState[i][j][k] = 1;
      }
    }
  }
  for (int i=0; i<grid.x; i++) {
    for (int j=0; j<grid.y; j++) {
      for (int k=0; k<grid.z; k++) {
        state[i][j][k][m] = tempState[i][j][k];
      }
    }
  }
}

float returnChannel(int oldVal, int newVal, int counter, int interval) {
  float ratio = float(counter)/float(interval);
  float val = map(ratio, 0, 1, float(oldVal), float(newVal));
  //if (oldVal != newVal) {
  //  println(oldVal, newVal, ratio, val);
  //}
  return val;
}

void drawSim() {
  if (animate) {
    if (counter % smallTransition == 0) {
      updateOldState(0);
      calRule(0);
    }
    if (counter % mediumTransition == 0) {
      updateOldState(1);
      calRule(1);
    }
    if (counter % largeTransition == 0) {
      updateOldState(2);
      calRule(2);
    }
  }

  for (int i=0; i<grid.x; i++) {
    for (int j=0; j<grid.y; j++) {
      for (int k=0; k<grid.z; k++) {
        int red = int(returnChannel(oldState[i][j][k][0], state[i][j][k][0], counter%smallTransition, smallTransition)*255);
        int blue = int(returnChannel(oldState[i][j][k][1], state[i][j][k][1], counter%mediumTransition, mediumTransition)*255);
        int green = int(returnChannel(oldState[i][j][k][2], state[i][j][k][2], counter%largeTransition, largeTransition)*255);
        red = constrain(red, 0, 255);
        blue = constrain(blue, 0, 255);
        green = constrain(green, 0, 255);
        setGridColor(i, j, k, red, green, blue);
      }
    }
  }
  if (animate) {
    counter++;
  }
}

class Resource {
  PVector loc;
  int state = 0;

  Resource(int xX, int yY, int zZ) {
    loc = new PVector(xX, yY, zZ);
  }
}

class Rule {
  int i;
  int a;
  int b;

  Rule(int I, int A, int B) {
    i = I;
    a = A;
    b = B;
  }
}